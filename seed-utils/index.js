// Generated by CoffeeScript 1.7.1
(function() {
  var bs, col, cycleNextTab, cycleTabs, formGroup, getLocally, input, label, layout, m, mdColXs12, mdColXs6, passThru, row, storeLocally, window, _,
    __slice = [].slice;

  _ = require('lodash');

  m = require('mithril');

  if (typeof window === "undefined" || window === null) {
    window = {
      __not_browser: true,
      localStorage: {}
    };
  }

  storeLocally = function(key, val) {
    var _ref;
    console.log("storing [" + key + "]", val);
    if (window.__not_browser) {
      return window.localStorage[key] = val;
    } else {
      return (_ref = window.localStorage) != null ? _ref[key] = JSON.stringify(val) : void 0;
    }
  };

  getLocally = function(key) {
    var v, _ref, _ref1, _ref2;
    if (window.__not_browser) {
      v = (_ref = window.localStorage[key]) != null ? _ref : null;
    } else {
      v = JSON.parse((_ref1 = (_ref2 = window.localStorage) != null ? _ref2[key] : void 0) != null ? _ref1 : null);
    }
    console.log("getting [" + key + "]", v);
    return v;
  };

  passThru = function(ctrlInstance) {
    return function() {
      return ctrlInstance;
    };
  };

  cycleNextTab = function(nextTab) {
    return m.route(nextTab);
  };

  cycleTabs = function(idList, wait) {
    var current, nextTab;
    idList = _.clone(idList);
    current = idList.shift();
    nextTab = idList[0];
    idList.push(current);
    _.delay(cycleNextTab, wait, "/" + nextTab);
    return _.delay(cycleTabs, wait * 2, idList, wait);
  };

  bs = {};

  row = function() {
    var attrs, children, cssOrAttrs, extras, staticCss, _i;
    extras = 2 <= arguments.length ? __slice.call(arguments, 0, _i = arguments.length - 1) : (_i = 0, []), children = arguments[_i++];
    if ((extras != null ? extras.length : void 0) === 2) {
      staticCss = extras[0], attrs = extras[1];
    }
    if ((extras != null ? extras.length : void 0) < 2) {
      cssOrAttrs = extras.shift();
      if (_.isString(cssOrAttrs)) {
        staticCss = cssOrAttrs;
      }
      if (_.isPlainObject(cssOrAttrs)) {
        attrs = cssOrAttrs;
      }
    }
    if (staticCss == null) {
      staticCss = '';
    }
    if (attrs == null) {
      attrs = {};
    }
    return m(".row" + staticCss, attrs, children);
  };

  col = _.curry(function(xs, md, staticCss, content) {
    content = _.isArray(content) ? content : [content];
    return m(".col-xs-" + xs + ".col-md-" + md + staticCss, content);
  });

  mdColXs12 = col(12);

  mdColXs6 = col(6);

  _.each([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], function(num) {
    bs["md" + num + "Xs12"] = mdColXs12(num);
    return bs["md" + num + "Xs6"] = mdColXs6(num);
  });

  label = function(attrs) {
    var content, staticCss;
    console.log(attrs);
    staticCss = attrs.staticCss, content = attrs.content;
    if (staticCss == null) {
      staticCss = '';
    }
    delete attrs.staticCss;
    delete attrs.content;
    console.log(attrs, staticCss, content);
    return m("label" + staticCss, attrs, content);
  };

  input = function(attrs) {
    var staticCss, tag;
    tag = attrs.tag, staticCss = attrs.staticCss;
    if (tag == null) {
      tag = 'input';
    }
    if (staticCss == null) {
      staticCss = '';
    }
    delete attrs.tag;
    delete attrs.staticCss;
    console.log(attrs, staticCss, tag);
    return m("" + tag + staticCss, attrs);
  };

  formGroup = function(opts) {
    opts = _.clone(opts);
    return m('.form-group', label(opts.label), input(opts.input));
  };

  _.extend(bs, {
    row: row,
    formGroup: formGroup,
    input: input,
    label: label
  });

  layout = function(nav, body, attrs) {
    if (attrs == null) {
      attrs = {};
    }
    return m('.layout.container-fluid', attrs, m('.row', [m('header', nav), m('main', body)]));
  };

  module.exports = {
    storeLocally: storeLocally,
    getLocally: getLocally,
    layout: layout,
    bs: bs,
    passThru: passThru,
    cycleTabs: cycleTabs
  };

}).call(this);
